#!/usr/bin/env python3
'''
Author: Yuankai He
Correspondence: yh464@cam.ac.uk
Versparsern 1: 2025-05-27

A script to batch run GWAS by GENESIS

Requires following inputs: 
    phenotype file in FID IID *** format
    covariants files in FID IID *** format
    PLINK bed binaries, needs all autosomes concatenated into one file
'''

def main(args):
  # array submitter
  from _utils.slurm import array_submitter
  grm_submitter = array_submitter(name = f'grm_pcrelate_{args.pheno}', timeout = 360, n_cpu = 4, env = 'gentoolsr')
  submitter = array_submitter(name = f'gwa_genesis_{args.pheno}', timeout = 90, n_cpu = int(args.n_threads/3), 
    env = 'gentoolsr', dependency = [grm_submitter])
  
  # check for GRM generated by PC-RELATE
  import os
  if not os.path.isfile(f'{args.bed}.pcrelate.rdata'):
    if not os.path.isfile(f'{args.bed}.bed'): raise FileNotFoundError(f'PLINK bed file {args.bed}.bed not found')
    Warning('No GRM found, generating GRM by PC-RELATE')
    grm_submitter.add(f'Rscript grm_pcrelate.r -i {args.bed}')
    grm_submitter.submit()

  for g in args.pheno:
    # check phenotype file
    pheno_file = f'{args._in}/{g}'
    if pheno_file[-4:] not in ['.txt','.tsv','.csv']: pheno_file += '.txt'
    if not os.path.isfile(pheno_file): raise FileNotFoundError(f'Phenotype file {pheno_file} not found')
    hdr = open(pheno_file).readline().strip().split()
    if hdr[0] != 'FID' or hdr[1] != 'IID':
      raise ValueError('Phenotype file should be in the format: FID IID *pheno')

    # output directory
    prefix = g.replace('.txt','').replace('.tsv','').replace('.csv','')
    outdir = f'{args.out}/{prefix}'
    if os.path.isdir(outdir):
      tmp = input(f'Found existing output directory, please check or specify new output directory: \n[{outdir}]')
      if len(tmp) == 0: pass
      elif tmp.find('/') == -1: outdir = f'{outdir}{tmp}'
      else: outdir = tmp
    if not os.path.isdir(outdir): os.system(f'mkdir -p {outdir}')
    print(f'GWAS output will be saved to {outdir}')

    # run GENESIS
    for p in hdr[2:]:
      out_file = f'{outdir}/{p}.fastGWA'
      if os.path.isfile(out_file) and not args.force: continue
      cmd = ['Rscript', 'gwa_genesis.r', p, '-i', pheno_file, '-o', outdir, '-b', args.bed, 
             '--dcov', args.dcov, '--qcov', args.qcov,'--n_threads',str(args.n_threads)]
      if args.force: cmd.append('-f')
      submitter.add(' '.join(cmd))
  submitter.submit()
  return submitter

if __name__ == '__main__':
  from _utils.slurm import slurm_parser
  parser = slurm_parser(description = 'This script batch runs GWAS by GENESIS')
  parser.add_argument('pheno', help = 'Phenotype group file name, format FID IID ***', nargs = '*')
  parser.add_argument('-i','--in', dest = '_in', help = 'Phenotype directory', default = '../pheno/abcd/')
  parser.add_argument('-o','--out', dest  = 'out', help = 'Output directory', default = '../gwa')
  parser.add_argument('-d','--dcov',dest = 'dcov', help = 'DISCRETE covariance file', default = '../params/abcd_dcov.txt')
  parser.add_argument('-q','--qcov',dest = 'qcov', help = 'QUANTITATIVE covariance file', default = '../params/abcd_qcov.txt')
  parser.add_argument('-b','--bed', help = 'PLINK bed file PREFIX, needs all autosomes',
    default = '/rds/project/rb643/rds-rb643-ukbiobank2/Data_Users/yh464/params/bed_abcd/abcd_eur')
  parser.add_argument('--n_threads', type = int, default = 8, help = 'Number of threads to use')
  parser.add_argument('-f','--force', dest = 'force', help = 'Force overwrite',
    default = False, action = 'store_true')
  
  args = parser.parse_args()
  import os
  for arg in ['_in','out','dcov','qcov','bed']:
      exec(f'args.{arg} = os.path.realpath(args.{arg})')
  
  from _utils import cmdhistory, path, logger
  logger.splash(args)
  cmdhistory.log()
  proj = path.project()
  proj.add_var('/%pheng',r'.+', 'phenotype group')
  proj.add_var('/%pheno',r'.+', 'phenotype')
  proj.add_input(args._in+'/%pheng.txt', __file__)
  proj.add_output(args.out+'/%pheng/%pheno.fastGWA', __file__)
  try: main(args)
  except: cmdhistory.errlog()